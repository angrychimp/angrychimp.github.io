<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-23T16:24:28-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">{ angrychimp.net }</title><subtitle>Blog and website of Randall Kahler, blogging mainly for tech. Opinions expressed are mine.</subtitle><author><name>Randall KAhler</name><email>randy@angrychimp.net</email></author><entry><title type="html">Developing a new chapter</title><link href="http://localhost:4000/blog/Developing-a-new-chapter/" rel="alternate" type="text/html" title="Developing a new chapter" /><published>2019-01-14T00:00:00-08:00</published><updated>2019-01-14T00:00:00-08:00</updated><id>http://localhost:4000/blog/Developing-a-new-chapter</id><content type="html" xml:base="http://localhost:4000/blog/Developing-a-new-chapter/">&lt;p&gt;After 12 years with Dreamhost, I cut the cord and decided to branch out into the strange and challenging world of &lt;em&gt;free web hosting&lt;/em&gt;. I reached the point where I just wasn’t making enough use of my Dreamhost account to just paying $11/month. I was hosting 2 blogs, 2 project domains, and 3 professional sites for a friend, and traffic was so low that I’m sure I didn’t even amount to statistical insignifance on their bandwidth monitors.&lt;/p&gt;

&lt;p&gt;So I backed up as much as I could imagine, created &lt;a href=&quot;http://angrychimp.home.blog&quot;&gt;free Wordpress sites&lt;/a&gt; to host all our historical content, and struck out to develop something fresh. So here it is - my new tech/personal blog hosted on Github using Jekyll. I figure if there’s anything else that I need to play around with, I can either do it using a home server (I just yesterday dug out my old 2012 Mac Mini and installed Ubuntu 18.04 LTS - it’s running like a champ) or deploy something to AWS/GCE. Google cloud shell is also a great place to play around with random experiments.&lt;/p&gt;

&lt;p&gt;Yay for trying new things (and reducing monthly expenses).&lt;/p&gt;</content><author><name>Randall KAhler</name><email>randy@angrychimp.net</email></author><category term="[&quot;blog&quot;]" /><category term="github" /><category term="blog" /><category term="meta" /><summary type="html">After 12 years with Dreamhost, I cut the cord and decided to branch out into the strange and challenging world of free web hosting. I reached the point where I just wasn’t making enough use of my Dreamhost account to just paying $11/month. I was hosting 2 blogs, 2 project domains, and 3 professional sites for a friend, and traffic was so low that I’m sure I didn’t even amount to statistical insignifance on their bandwidth monitors.</summary></entry><entry><title type="html">Making an Athena table from the SecLists repo</title><link href="http://localhost:4000/secops/Athena-table-from-seclists/" rel="alternate" type="text/html" title="Making an Athena table from the SecLists repo" /><published>2017-09-22T00:00:00-07:00</published><updated>2017-09-22T00:00:00-07:00</updated><id>http://localhost:4000/secops/Athena-table-from-seclists</id><content type="html" xml:base="http://localhost:4000/secops/Athena-table-from-seclists/">&lt;p&gt;If you’re into web security, you have hopefully heard of &lt;a href=&quot;https://github.com/danielmiessler/SecLists&quot;&gt;SecLists&lt;/a&gt;. It’s an amazing repository of keywords, indicators, payloads, passwords and more. It’s great not just for SecOps, but also developers and QA who want to step up their security game.&lt;/p&gt;

&lt;p&gt;As part of a project I’m working on, I wanted to be able to quickly compare strings in the &lt;code&gt;Discovery/Web_Content&lt;/code&gt; files against logs I have regularly synched to &lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;AWS S3&lt;/a&gt; (specifically, ELB logs for my SaaS platform). In order to find interesting data in those logs, I’ve already created &lt;a href=&quot;https://aws.amazon.com/athena/&quot;&gt;Athena&lt;/a&gt; tables, so I just need a new table for this content. So I wrote a quick script that fetches the SecLists repo, copies it up to S3, then generates an Athena table.&lt;/p&gt;

&lt;p&gt;This gist shows how to make the whole repo searchable, but it’s worth noting that there are README files and other content in there you &lt;em&gt;don’t&lt;/em&gt; want to query (including GIFs and other binaries). So it’s a good idea to restrict your queries to subfolders using the &lt;code&gt;$path&lt;/code&gt; metavariable, or CREATE your table using that subfolder in the &lt;code&gt;LOCATION&lt;/code&gt; path. (For example, since I’m only interested in web content, I gave that full path in my &lt;code&gt;CREATE TABLE&lt;/code&gt; statement.)&lt;/p&gt;

&lt;p&gt;What’s rad about this is that (a) it’s searchable using standard SQL, (b) I can compare strings to other data files using Athena, and (c) I only incur access/query charges when I run my queries, rather than having an always-on database instance.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/angrychimp&quot;&gt;Let me know on Twitter&lt;/a&gt; what you’re using Athena for!&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/angrychimp/3b6efb260524a38f2c544b2ee83d0028.js&quot;&gt;&lt;/script&gt;

&lt;p&gt; &lt;/p&gt;</content><author><name>Randall KAhler</name><email>randy@angrychimp.net</email></author><category term="db" /><category term="ops" /><category term="secops" /><summary type="html">If you’re into web security, you have hopefully heard of SecLists. It’s an amazing repository of keywords, indicators, payloads, passwords and more. It’s great not just for SecOps, but also developers and QA who want to step up their security game.</summary></entry><entry><title type="html">Randomly redistributing files with bash</title><link href="http://localhost:4000/coding/Randomly-redistributing-files-with-bash/" rel="alternate" type="text/html" title="Randomly redistributing files with bash" /><published>2017-01-12T00:00:00-08:00</published><updated>2017-01-12T00:00:00-08:00</updated><id>http://localhost:4000/coding/Randomly-redistributing-files-with-bash</id><content type="html" xml:base="http://localhost:4000/coding/Randomly-redistributing-files-with-bash/">&lt;p&gt;This was was damn confusing, but the solution is absurdly obvious. I needed to relocate a large number of files from a single source into a collection of subfolders. (These subfolders were essentially worker queues, so I wanted a roughly even distribution every time new files appeared in the source folder.)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/angrychimp/b3cd314bd0fff75ea241acf58abe6bf9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;But I noticed that every time this executed, all my source files were ending up in the same queue folder (and not being evenly distributed). What gives?&lt;/p&gt;

&lt;p&gt;Turns out, my call to &lt;code&gt;$RANDOM&lt;/code&gt; was being executed &lt;em&gt;only once at runtime&lt;/em&gt;, so that value was being set statically, and used for all subsequent &lt;code&gt;mv&lt;/code&gt; commands. The Eureka moment what when I realized that as a subshell command, I need to escape my dollar-signs so that they’d be ignored by the parent shell, and translated by the child.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/angrychimp/592544a8e7fb2bfbc40918dec281f871.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I suddenly found all my files going to the correct folders. Yet another reminder to always keep scope in mind.&lt;/p&gt;</content><author><name>Randall KAhler</name><email>randy@angrychimp.net</email></author><category term="[&quot;coding&quot;]" /><category term="bash" /><category term="ops" /><category term="devops" /><summary type="html">This was was damn confusing, but the solution is absurdly obvious. I needed to relocate a large number of files from a single source into a collection of subfolders. (These subfolders were essentially worker queues, so I wanted a roughly even distribution every time new files appeared in the source folder.)</summary></entry><entry><title type="html">Recovering from Apache “400 Bad Request” errors</title><link href="http://localhost:4000/coding/Recovering-from-Apache-errors/" rel="alternate" type="text/html" title="Recovering from Apache &quot;400 Bad Request&quot; errors" /><published>2017-01-09T00:00:00-08:00</published><updated>2017-01-09T00:00:00-08:00</updated><id>http://localhost:4000/coding/Recovering-from-Apache-errors</id><content type="html" xml:base="http://localhost:4000/coding/Recovering-from-Apache-errors/">&lt;p&gt;You never want to encounter errors in your production environment. But what do you do if you release code that generates fatal errors outside your application?&lt;/p&gt;

&lt;p&gt;A recent release we deployed caused an issue with links our platform was generating. Instead of nice links like this:
&lt;code&gt;http://example.com/foo:bar:baz&lt;/code&gt;
we started seeing links like:
&lt;code&gt;http://example.com/foo:bar:%?baz?%&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The source of the issue was easy enough to track down. We use “%%” to wrap replacement variables for our email templates, and when a variable can’t be identified, we re-wrap the name with “%?”. (It’s arguable we shouldn’t do that, but that’s a topic for a later discussion.) Rolling back the change fixed the issue for future generated emails, but what to do about the old emails? They’re already in inboxes world-wide, and we can’t fix the URI for those links.&lt;/p&gt;

&lt;p&gt;When Apache receives a request in this format, where you have a percent sign followed by a non-alphanumeric tuple, it panics. It’s thinking that the %-sign is there to URL-encode something. When you follow a %-sign with a question mark, it generates a parse error, and throws a “400 Bad Request”. You can’t use &lt;code&gt;mod-rewrite&lt;/code&gt; because the error occurs before rewrite rules are processed. But Apache does give you one opportunity to rewrite history (so to speak): &lt;a href=&quot;https://httpd.apache.org/docs/current/mod/core.html#errordocument&quot;&gt;&lt;code&gt;ErrorDocument&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We were able to quickly deploy a new script to production, and set the path to that script as the &lt;code&gt;ErrorDocument&lt;/code&gt; handler for HTTP 400 responses.&lt;/p&gt;
&lt;pre&gt;# In /etc/httpd/conf.d/my-app.conf
...
ErrorDocument 400 /error/400.php
...&lt;/pre&gt;
&lt;p&gt;Apache will redirect the request to that page, with the URI intact. It’ll even still load your other modules, including (in this case) the PHP processor. So in that &lt;code&gt;400.php&lt;/code&gt; script, we parse the URI, look for the bad string, and simply rewrite (or remove) it.&lt;/p&gt;
&lt;pre&gt;&amp;lt;?php

if (strpos($_SERVER['REQUEST_URI'], '%?') !== false) {
    $uri = str_replace('%', '%25', $_SERVER['REQUEST_URI']);
    header('Location: ' . $uri);
    exit;
}

echo &quot;This server has encountered an error.&quot;;&lt;/pre&gt;
&lt;p&gt;Et voila. It’s not the perfect user experience, since those values weren’t replaced in transit like they should have been. But at least the email recipients clicking on the links aren’t getting standard “400 Bad Request” error pages. It was a tidy little solution to what could have been a devastating problem.&lt;/p&gt;</content><author><name>Randall KAhler</name><email>randy@angrychimp.net</email></author><category term="apache" /><category term="database" /><category term="web" /><category term="troubleshooting" /><category term="devops" /><category term="site-reliability" /><summary type="html">You never want to encounter errors in your production environment. But what do you do if you release code that generates fatal errors outside your application?</summary></entry></feed>